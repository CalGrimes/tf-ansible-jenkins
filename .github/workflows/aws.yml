name: Terraform Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: "eu-west-2"
  PREFIX: "cgrim-dev"

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  TerraformPlan:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::701722125320:role/GitHubAction-AssumeRoleWithAction
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2.0.2

      - name: Terraform init and plan
        run: |
          cd terraform
          echo "** Running Terraform Init**"
          terraform init

          echo "** Running Terraform Validate**"
          terraform validate

          echo "** Running Terraform Plan**"
          terraform plan -var "prefix=${{ env.PREFIX }}" -var "my_ip=${{ secrets.MY_IP }}" -out=terraform.tfplan

      - name: Upload Terraform plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/terraform.tfplan

  TerraformApply:
    runs-on: ubuntu-latest
    needs: TerraformPlan
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::701722125320:role/GitHubAction-AssumeRoleWithAction
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2.0.2

      - name: Download Terraform plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform

      - name: Terraform Apply
        run: |
          cd terraform
          echo "** Running Terraform Init**"
          terraform init
          echo "** Running Terraform Apply**"
          terraform apply -auto-approve -var "prefix=${{ env.PREFIX }}" -var "my_ip=${{ secrets.MY_IP }}" terraform.tfplan
          terraform output -raw private_key > /tmp/private_key.pem
          terraform output -raw public_ip > /tmp/public_ip.txt
          chmod 400 /tmp/private_key.pem

      - name: Initialise Ansible
        run: |
         cat /tmp/public_ip.txt
         # Run Python script to substitute HOSTIP in the inventory
         python3 -c "
         import os

         public_ip = ""
         inventory = ""

         # Read public_ip.txt
         with open('/tmp/public_ip.txt') as file:
            public_ip = file.read()
         
  
         # Read the inventory file
         with open('ansible/inventory', 'r') as file:
             inventory = file.read()
  
         # Substitute <host_ip> with the actual IP
         inventory = inventory.replace('<host_ip>', public_ip)
  
         # Write the modified content back to the inventory file
         with open('ansible/inventory', 'w') as file:
             file.write(inventory)
         "
         # Install Ansible
         pip3 install --user ansible
         
         # Display the updated inventory file
         cat ansible/inventory
         
         # Run the Ansible playbook
         cd ansible
         ansible-playbook --private-key /tmp/private_key.pem -i inventory jenkinsPlaybook.yaml